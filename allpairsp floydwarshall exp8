#include <stdio.h>

#define INF 1000000  // Large value representing infinity

void floydWarshall(int graph[][10], int n) {
    int dist[10][10], i, j, k;

    // Initialize distance matrix
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            if (graph[i][j] != 0)
                dist[i][j] = graph[i][j];
            else if (i != j)
                dist[i][j] = INF;
            else
                dist[i][j] = 0;
        }
    }

    // Floyd-Warshall algorithm
    for (k = 0; k < n; k++) {
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    // Print the result
    printf("📍 Shortest Distance Matrix:\n\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            if (dist[i][j] == INF)
                printf("INF\t");
            else
                printf("%d\t", dist[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int graph[10][10] = {
        {0, 3, 0, 0}, 
        {3, 0, 1, 0},
        {0, 1, 0, 7},  
        {0, 0, 7, 0}  
    };
    int n = 4; 

    floydWarshall(graph, n);

    return 0;
}

op-
 Shortest Distance Matrix:

0	3	4	11	
3	0	1	8	
4	1	0	7	
11	8	7	0	
