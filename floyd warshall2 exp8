#include <stdio.h>
#include <limits.h>  // For INT_MAX

#define MAX INT_MAX  // Use the maximum integer value to represent infinity

void floydWarshall(int graph[][10], int n) {
    int dist[10][10], i, j, k;

    // Initialize distance matrix
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            if (graph[i][j] != 0)
                dist[i][j] = graph[i][j];
            else if (i != j)
                dist[i][j] = MAX;  // No path
            else
                dist[i][j] = 0;  // Distance to self is 0
        }
    }

    // Floyd-Warshall algorithm
    for (k = 0; k < n; k++) {
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (dist[i][j] > dist[i][k] + dist[k][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
        }
    }

    // Print shortest distance matrix
    printf("Shortest Distance Matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            if (dist[i][j] == MAX)
                printf("âˆž\t");
            else
                printf("%d\t", dist[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int graph[10][10], n, i, j;

    // Ask for the number of vertices
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    // Ask for the adjacency matrix (enter 0 for no path between nodes)
    printf("Enter the adjacency matrix (enter 0 for no path between nodes):\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    // Call the Floyd-Warshall algorithm
    floydWarshall(graph, n);

    return 0;
}


op-Enter the number of vertices: 4
Enter the adjacency matrix (enter 0 for no path between nodes):
0 4 1 3
3 0 6 5
1 3 0 7
9 6 4 0
Shortest Distance Matrix:
0	4	1	3	
3	0	4	5	
1	3	0	4	
5	6	4	0
